/*
 * Click nbfs://nbhost/SystemFileSystem/listalates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/listalates/GUIForms/JFrame.java to edit this listalate
 */
package lab7p2_gerardohasbum;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author ghasb
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public ArrayList<Producto> lista = new ArrayList();
    public ArrayList<String> paths = new ArrayList();

    public Main() {
        initComponents();
        lista.add(new Producto(000, 0, 001, 1, 3.50, "Agua"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TreePopup = new javax.swing.JPopupMenu();
        LoadFile = new javax.swing.JMenuItem();
        RefreshTree = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        CommandLine = new javax.swing.JTextField();
        CommandEntrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableProductos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TreeArchivos = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        WindowMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        LoadFile.setText("Load File");
        LoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileActionPerformed(evt);
            }
        });
        TreePopup.add(LoadFile);

        RefreshTree.setText("Refresh Tree");
        RefreshTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshTreeActionPerformed(evt);
            }
        });
        TreePopup.add(RefreshTree);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        CommandLine.setBackground(new java.awt.Color(255, 255, 255));
        CommandLine.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        CommandEntrar.setText("Entrar");
        CommandEntrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CommandEntrarMouseClicked(evt);
            }
        });

        TableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "name", "category", "price", "aisle", "bin"
            }
        ));
        jScrollPane1.setViewportView(TableProductos);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("CSVs");
        TreeArchivos.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        TreeArchivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TreeArchivosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TreeArchivos);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Command Line");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CommandLine, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CommandEntrar, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CommandEntrar, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(CommandLine))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        FileMenu.setText("File");

        jMenuItem1.setText("New File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        FileMenu.add(jMenuItem1);

        jMenuItem2.setText("Import FIle");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        FileMenu.add(jMenuItem2);

        jMenuBar1.add(FileMenu);

        WindowMenu.setText("Window");

        jMenuItem3.setText("Limpiar CMD");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        WindowMenu.add(jMenuItem3);

        jMenuItem4.setText("Limpiar Tabla");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        WindowMenu.add(jMenuItem4);

        jMenuItem5.setText("Refresh Trees");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        WindowMenu.add(jMenuItem5);

        jMenuBar1.add(WindowMenu);

        HelpMenu.setText("Help");

        jMenuItem6.setText("Product Structure");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        HelpMenu.add(jMenuItem6);

        jMenuItem7.setText("Guia");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        HelpMenu.add(jMenuItem7);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CommandEntrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CommandEntrarMouseClicked
        // TODO add your handling code here:

        String[] comando = CommandLine.getText().split(" ");

        switch (comando[0]) {

            case "./load":
                String append = "./Archivo/";
                append += comando[1];
                File archivo = new File(append);
                CargarArchivo(archivo);
                UpdateTable();
                break;

            case "./create":
                if (!(comando[2].equals("-single"))) {

                    JOptionPane.showMessageDialog(this, "Womp Womp");

                } else {

                    try {
                        if (comando[1].contains(".txt")) {
                            CrearArchivo(comando[1]);
                        } else {
                            CrearArchivo(comando[1] + ".txt");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                break;

            case "./clear":
                for (int i = 0; i < TableProductos.getColumnCount(); i++) {

                    for (int j = 0; j < TableProductos.getRowCount(); j++) {

                        TableProductos.setValueAt(null, j, i);

                    }

                }
                break;

            case "./refresh":
                RefrescarTree();
                break;

        }

    }//GEN-LAST:event_CommandEntrarMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        String comando = JOptionPane.showInputDialog(this, "Ingrese el nombre del archivo a crear");

        try {
            if (comando.contains(".txt")) {
                CrearArchivo(comando);
            } else {
                CrearArchivo(comando + ".txt");
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void TreeArchivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TreeArchivosMouseClicked
        // TODO add your handling code here:

        if (evt.getButton() == 3) {

            if (TreeArchivos.getSelectionPath() != null) {

                DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) TreeArchivos.getSelectionPath().getLastPathComponent();

                if (nodo.getUserObject() instanceof String) {

                    TreePopup.show(TreeArchivos, evt.getX(), evt.getY());

                }

            }

        }

    }//GEN-LAST:event_TreeArchivosMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:

        String comando = JOptionPane.showInputDialog(this, "Ingrese el file que desea abrir: ");

        String regex = "^.*\\.txt$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(comando);

        if (matcher.matches()) {

            File archivo = new File(comando);
            CargarArchivo(archivo);
            UpdateTable();

        } else {
            File archivo = new File(comando + ".txt");
            CargarArchivo(archivo);
            UpdateTable();
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        CommandLine.setText("");

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        for (int i = 0; i < TableProductos.getColumnCount(); i++) {

            for (int j = 0; j < TableProductos.getRowCount(); j++) {

                TableProductos.setValueAt(null, j, i);

            }

        }        // TODO add your handling code here:


    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:

        RefrescarTree();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:

        JOptionPane.showMessageDialog(this, "Estructura del producto: un producto contiene una id, un nombre, una categoria, un bin en donde se encuentra en el aisle, un aisle donde se encuentra y su precio");

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:

        JOptionPane.showMessageDialog(this, "1. ./load sampleText.txt => carga un archivo a la tabla\n"
                + "2. ./create sampleText -single => crea un archivo nuevo\n"
                + "3. ./clear => limpia la tabla\n"
                + "3. ./refresh => carga los archivos a la izquierda");

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void LoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileActionPerformed
        // TODO add your handling code here:

        File archivo = new File((String) evt.getSource());
        CargarArchivo(archivo);
        UpdateTable();

    }//GEN-LAST:event_LoadFileActionPerformed

    private void RefreshTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshTreeActionPerformed
        // TODO add your handling code here:
        
        RefrescarTree();
        
    }//GEN-LAST:event_RefreshTreeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    //Metodos
    public void UpdateTable() {

        DefaultTableModel modelo = (DefaultTableModel) TableProductos.getModel();

        modelo.setRowCount(0);
        for (int i = 0; i < lista.size(); i++) {

            Object[] modelo2 = {lista.get(i).getId(), lista.get(i).getNombre(), lista.get(i).getCategory(), lista.get(i).getPrecio(), lista.get(i).getAisle(), lista.get(i).getBin()};
            modelo.addRow(modelo2);

        }
        modelo.setRowCount(99);

        TableProductos.setModel(modelo);

    }

    public void CrearArchivo(String name) throws IOException {
        File temp = new File("./" + name);
        paths.add("./" + name);
        EscribirArchivo(temp);
    }

    public void EscribirArchivo(File archivo) throws IOException {

        FileWriter fw = null;
        BufferedWriter bw = null;
        lista = new ArrayList();

        for (int i = 0; i < TableProductos.getColumnCount(); i++) {

            for (int j = 0; j < TableProductos.getRowCount(); j++) {

                if (TableProductos.getValueAt(j, i) != null) {
                    int id = (int) TableProductos.getValueAt(j, i);
                    j++;
                    int category = (int) TableProductos.getValueAt(j, i);
                    j++;
                    int bin = (int) TableProductos.getValueAt(j, i);
                    j++;
                    int aisle = (int) TableProductos.getValueAt(j, i);
                    j++;
                    double precio = (double) TableProductos.getValueAt(j, i);
                    j++;
                    String nombre = (String) TableProductos.getValueAt(j, i);

                    lista.add(new Producto(id, category, bin, aisle, precio, nombre));
                }

            }

        }

        try {

            fw = new FileWriter(archivo, false);
            bw = new BufferedWriter(fw);

            for (Producto p : lista) {

                bw.write(p.getId() + ",");
                bw.write(p.getCategory() + ",");
                bw.write(p.getBin() + ",");
                bw.write(p.getAisle() + ",");
                bw.write(p.getPrecio() + ",");
                bw.write(p.getNombre() + ",");

            }

            bw.flush();

        } catch (Exception e) {

            e.printStackTrace();

        }

        fw.close();
        bw.close();

    }

    public void CargarArchivo(File archivo) {

        Scanner sc = null;
        lista = new ArrayList();

        if (archivo.exists()) {

            try {

                sc = new Scanner(archivo);
                sc.useDelimiter(",");

                while (sc.hasNext()) {

                    lista.add(new Producto(sc.nextInt(), sc.nextInt(), sc.nextInt(), sc.nextInt(), sc.nextDouble(), sc.next()));

                }

            } catch (Exception e) {

                e.printStackTrace();

            }

        }

    }

    public void RefrescarTree() {

        DefaultTreeModel m = (DefaultTreeModel) TreeArchivos.getModel();

        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(m.getRoot());
        raiz.removeAllChildren();

        for (String f : paths) {

            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(f);

            raiz.add(nodo);

        }

        m.setRoot(raiz);
        m.reload();
        TreeArchivos.setModel(m);
    }

    public void NodoCreado() {

    }

    //Fin Metodos

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CommandEntrar;
    private javax.swing.JTextField CommandLine;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem LoadFile;
    private javax.swing.JMenuItem RefreshTree;
    private javax.swing.JTable TableProductos;
    private javax.swing.JTree TreeArchivos;
    private javax.swing.JPopupMenu TreePopup;
    private javax.swing.JMenu WindowMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
